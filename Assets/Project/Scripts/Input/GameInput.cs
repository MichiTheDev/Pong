//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Project/Scripts/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Twode.Pong
{
    public partial class @GameInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""LeftPlayer"",
            ""id"": ""2099ecf3-deac-43c7-9397-e5929ba63dd3"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""1227cf08-71b2-4510-b5bb-d252829a48f7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard (Default)"",
                    ""id"": ""ad9908aa-5127-45a3-9a74-d4bc1a42e886"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""80dd44f2-4061-4a65-8b5a-1050ad4ecb34"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8f80743d-b158-4940-8bd6-3713c6c94ed4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""RightPlayer"",
            ""id"": ""d9f67d2e-116c-422c-946e-a3f46c001768"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""abed7bd7-42c8-4523-a36a-39b52b9ea47e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard (Arrow Keys)"",
                    ""id"": ""9e2b1845-91ad-4da9-a84a-7cf333173691"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""343244db-9dd4-4b38-8715-517a12029ded"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a756da4b-6cbd-404b-8116-f9bd7fc9e661"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Game"",
            ""id"": ""0be05278-4d49-4b21-9f24-4d0e43f9e85e"",
            ""actions"": [
                {
                    ""name"": ""StartGame"",
                    ""type"": ""Button"",
                    ""id"": ""5af911dd-4207-46c4-8eea-b501656fe91f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseGame"",
                    ""type"": ""Button"",
                    ""id"": ""284d7f52-2592-4134-87c3-18aeeed03ee4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d6495c95-7be8-414c-916c-eab79083fb7f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c6728d9-2fa9-46ca-b893-c5cecef92c43"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // LeftPlayer
            m_LeftPlayer = asset.FindActionMap("LeftPlayer", throwIfNotFound: true);
            m_LeftPlayer_Movement = m_LeftPlayer.FindAction("Movement", throwIfNotFound: true);
            // RightPlayer
            m_RightPlayer = asset.FindActionMap("RightPlayer", throwIfNotFound: true);
            m_RightPlayer_Movement = m_RightPlayer.FindAction("Movement", throwIfNotFound: true);
            // Game
            m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
            m_Game_StartGame = m_Game.FindAction("StartGame", throwIfNotFound: true);
            m_Game_PauseGame = m_Game.FindAction("PauseGame", throwIfNotFound: true);
        }

        ~@GameInput()
        {
            UnityEngine.Debug.Assert(!m_LeftPlayer.enabled, "This will cause a leak and performance issues, GameInput.LeftPlayer.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_RightPlayer.enabled, "This will cause a leak and performance issues, GameInput.RightPlayer.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Game.enabled, "This will cause a leak and performance issues, GameInput.Game.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // LeftPlayer
        private readonly InputActionMap m_LeftPlayer;
        private List<ILeftPlayerActions> m_LeftPlayerActionsCallbackInterfaces = new List<ILeftPlayerActions>();
        private readonly InputAction m_LeftPlayer_Movement;
        public struct LeftPlayerActions
        {
            private @GameInput m_Wrapper;
            public LeftPlayerActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_LeftPlayer_Movement;
            public InputActionMap Get() { return m_Wrapper.m_LeftPlayer; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LeftPlayerActions set) { return set.Get(); }
            public void AddCallbacks(ILeftPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_LeftPlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_LeftPlayerActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }

            private void UnregisterCallbacks(ILeftPlayerActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
            }

            public void RemoveCallbacks(ILeftPlayerActions instance)
            {
                if (m_Wrapper.m_LeftPlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ILeftPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_LeftPlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_LeftPlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public LeftPlayerActions @LeftPlayer => new LeftPlayerActions(this);

        // RightPlayer
        private readonly InputActionMap m_RightPlayer;
        private List<IRightPlayerActions> m_RightPlayerActionsCallbackInterfaces = new List<IRightPlayerActions>();
        private readonly InputAction m_RightPlayer_Movement;
        public struct RightPlayerActions
        {
            private @GameInput m_Wrapper;
            public RightPlayerActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_RightPlayer_Movement;
            public InputActionMap Get() { return m_Wrapper.m_RightPlayer; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(RightPlayerActions set) { return set.Get(); }
            public void AddCallbacks(IRightPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_RightPlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_RightPlayerActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }

            private void UnregisterCallbacks(IRightPlayerActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
            }

            public void RemoveCallbacks(IRightPlayerActions instance)
            {
                if (m_Wrapper.m_RightPlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IRightPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_RightPlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_RightPlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public RightPlayerActions @RightPlayer => new RightPlayerActions(this);

        // Game
        private readonly InputActionMap m_Game;
        private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
        private readonly InputAction m_Game_StartGame;
        private readonly InputAction m_Game_PauseGame;
        public struct GameActions
        {
            private @GameInput m_Wrapper;
            public GameActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @StartGame => m_Wrapper.m_Game_StartGame;
            public InputAction @PauseGame => m_Wrapper.m_Game_PauseGame;
            public InputActionMap Get() { return m_Wrapper.m_Game; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
            public void AddCallbacks(IGameActions instance)
            {
                if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
                @StartGame.started += instance.OnStartGame;
                @StartGame.performed += instance.OnStartGame;
                @StartGame.canceled += instance.OnStartGame;
                @PauseGame.started += instance.OnPauseGame;
                @PauseGame.performed += instance.OnPauseGame;
                @PauseGame.canceled += instance.OnPauseGame;
            }

            private void UnregisterCallbacks(IGameActions instance)
            {
                @StartGame.started -= instance.OnStartGame;
                @StartGame.performed -= instance.OnStartGame;
                @StartGame.canceled -= instance.OnStartGame;
                @PauseGame.started -= instance.OnPauseGame;
                @PauseGame.performed -= instance.OnPauseGame;
                @PauseGame.canceled -= instance.OnPauseGame;
            }

            public void RemoveCallbacks(IGameActions instance)
            {
                if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameActions instance)
            {
                foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameActions @Game => new GameActions(this);
        public interface ILeftPlayerActions
        {
            void OnMovement(InputAction.CallbackContext context);
        }
        public interface IRightPlayerActions
        {
            void OnMovement(InputAction.CallbackContext context);
        }
        public interface IGameActions
        {
            void OnStartGame(InputAction.CallbackContext context);
            void OnPauseGame(InputAction.CallbackContext context);
        }
    }
}
